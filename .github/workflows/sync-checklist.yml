name: Sync Audio IT field from checklist

on:
  issues:
    types: [edited]

permissions:
  contents: read
  issues: read
  pull-requests: read
  repository-projects: write

jobs:
  sync-audio-it:
    runs-on: ubuntu-latest
    steps:
      - name: Sync Audio IT field
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PROJECTS_TOKEN }}  # Personal access token
          script: |
            const issue = context.payload.issue;
            const body = issue.body;
            const issueId = issue.node_id;

            // Înlocuiește cu ID-urile reale ale proiectului, câmpului și opțiunilor
            const projectId = "PVT_kwHOCmDFmc4A31rN"; // ID-ul Project V2
            const fieldId = "PVTSSF_lAHOCmDFmc4A31rNzgs6G5E"; // ID-ul câmpului "Audio IT"
            const optionIds = {
              "To do": "685e784f",
              "In progress": "6fb89e71",
              "Done": "23df36af"
            };

            const audioITSectionRegex = /\*\*Audio IT:\*\*([\s\S]*?)(?=\n\s*\n|$)/;
            const sectionMatch = body.match(audioITSectionRegex);

            let selectedOption = null;
            if (sectionMatch) {
              const section = sectionMatch[1];
              if (section.includes("- [x] (To do)")) selectedOption = "To do";
              else if (section.includes("- [x] (In progress)")) selectedOption = "In progress";
              else if (section.includes("- [x] (Done)")) selectedOption = "Done";
            }

            if (!selectedOption) {
              console.log("Nicio opțiune Audio IT bifată.");
              return;
            }

            const itemsResponse = await github.graphql(`
              query {
                node(id: "${projectId}") {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                          }
                        }
                      }
                    }
                  }
                }
              }
            `);

            const item = itemsResponse.node.items.nodes.find(
              i => i.content && i.content.id === issueId
            );

            if (!item) {
              console.log("Nu am găsit itemul proiectului asociat cu acest issue.");
              return;
            }

            const itemId = item.id;
            const selectedOptionId = optionIds[selectedOption];

            await github.graphql(`
              mutation {
                updateProjectV2ItemFieldValue(input: {
                  projectId: "${projectId}",
                  itemId: "${itemId}",
                  fieldId: "${fieldId}",
                  value: {
                    singleSelectOptionId: "${selectedOptionId}"
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `);

            console.log("Audio IT setat la: " + selectedOption);
